{"version":3,"sources":["components/ObjectiveCard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ObjectiveCard","props","useState","showChildren","setShowChildren","showDetail","setShowDetail","childrenDiv","useRef","myDiv","className","classNames","ref","expanded","onClick","e","setTimeout","current","scrollIntoView","behavior","inline","block","stopPropagation","Fragment","hidden","children","style","marginLeft","marginTop","App","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wSAMaA,EAA8C,SAAAC,GAAU,IAAD,EAC1BC,oBAAS,GADiB,mBAC3DC,EAD2D,KAC7CC,EAD6C,OAE9BF,oBAAS,GAFqB,mBAE3DG,EAF2D,KAE/CC,EAF+C,KAG5DC,EAAcC,mBACdC,EAAQD,mBAEd,OACE,yBAAKE,UAAWC,IAAW,kBACzB,yBACEC,IAAKH,EACLC,UAAWC,IAAW,mBAAoB,CAAEE,SAAUR,IACtDS,QAAS,SAAAC,GACHZ,EACFC,GAAgB,GAEhBE,GAAeD,GAEjBW,WAAW,WACHP,EAAMQ,SACVR,EAAMQ,QAAQC,eAAe,CAC3BC,SAAU,SACVC,OAAQ,SACRC,MAAO,YAGV,GACHN,EAAEO,qBAGN,kBAAC,IAAMC,SAAP,KACE,yBACEb,UAAWC,IAAW,QAAS,KAAM,cAAe,CAClDa,OAAQrB,IAEVW,QAAS,SAAAC,GACPX,GAAgB,GAChBY,WAAW,WACHT,EAAYU,SAChBV,EAAYU,QAAQC,eAAe,CACjCC,SAAU,SACVC,OAAQ,SACRC,MAAO,YAGV,GACHN,EAAEO,kBACFhB,GAAc,KAGfL,EAAMwB,UACL,yBAAKf,UAAU,iBACb,yBACEA,UAAU,oBACVgB,MAAO,CACLC,WAAY,OACZC,UAAW,UAGf,yBACElB,UAAU,oBACVgB,MAAO,CACLC,WAAY,OACZC,UAAW,UAGf,yBACElB,UAAU,oBACVgB,MAAO,CAAEC,WAAY,WAK7B,yBACEf,IAAKL,EACLG,UAAWC,IAAW,QAAS,KAAM,YAAa,CAChDa,QAASrB,KAGVF,EAAMwB,aCnDFI,EA7BO,WACpB,OACE,yBAAKnB,UAAU,OACb,kBAAC,EAAD,CAAeoB,IAAI,KACjB,kBAAC,EAAD,CAAeA,IAAI,QACnB,kBAAC,EAAD,CAAeA,IAAI,SAErB,kBAAC,EAAD,CAAeA,IAAI,KACjB,kBAAC,EAAD,CAAeA,IAAI,QACnB,kBAAC,EAAD,CAAeA,IAAI,OACjB,kBAAC,EAAD,CAAeA,IAAI,SACjB,kBAAC,EAAD,CAAeA,IAAI,aAErB,kBAAC,EAAD,CAAeA,IAAI,UACnB,kBAAC,EAAD,CAAeA,IAAI,UACnB,kBAAC,EAAD,CAAeA,IAAI,WAErB,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,kBAAC,EAAD,CAAeA,IAAI,MACnB,kBAAC,EAAD,CAAeA,IAAI,KACjB,kBAAC,EAAD,CAAeA,IAAI,QACnB,kBAAC,EAAD,CAAeA,IAAI,WCfPC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.8fddc65a.chunk.js","sourcesContent":["import React, { useState, useRef } from \"react\";\r\nimport \"./ObjectiveCard.css\";\r\nimport classNames from \"classnames\";\r\n\r\nexport type ObjectiveCardProps = {};\r\n\r\nexport const ObjectiveCard: React.FC<ObjectiveCardProps> = props => {\r\n  const [showChildren, setShowChildren] = useState(false);\r\n  const [showDetail, setShowDetail] = useState(false);\r\n  const childrenDiv = useRef() as React.MutableRefObject<HTMLDivElement>;\r\n  const myDiv = useRef() as React.MutableRefObject<HTMLDivElement>;\r\n\r\n  return (\r\n    <div className={classNames(\"ObjectiveCard\")}>\r\n      <div\r\n        ref={myDiv}\r\n        className={classNames(\"ObjectiveContent\", { expanded: showDetail })}\r\n        onClick={e => {\r\n          if (showChildren) {\r\n            setShowChildren(false);\r\n          } else {\r\n            setShowDetail(!showDetail);\r\n          }\r\n          setTimeout(() => {\r\n            if (!!myDiv.current) {\r\n              myDiv.current.scrollIntoView({\r\n                behavior: \"smooth\",\r\n                inline: \"center\",\r\n                block: \"center\"\r\n              });\r\n            }\r\n          }, 1);\r\n          e.stopPropagation();\r\n        }}\r\n      />\r\n      <React.Fragment>\r\n        <div\r\n          className={classNames(\"Level\", \"L1\", \"Overlapping\", {\r\n            hidden: showChildren\r\n          })}\r\n          onClick={e => {\r\n            setShowChildren(true);\r\n            setTimeout(() => {\r\n              if (!!childrenDiv.current) {\r\n                childrenDiv.current.scrollIntoView({\r\n                  behavior: \"smooth\",\r\n                  inline: \"center\",\r\n                  block: \"center\"\r\n                });\r\n              }\r\n            }, 1);\r\n            e.stopPropagation();\r\n            setShowDetail(false);\r\n          }}\r\n        >\r\n          {props.children && (\r\n            <div className=\"ObjectiveCard\">\r\n              <div\r\n                className=\"CollapsedChildren\"\r\n                style={{\r\n                  marginLeft: \"20px\",\r\n                  marginTop: \"20px\"\r\n                }}\r\n              />\r\n              <div\r\n                className=\"CollapsedChildren\"\r\n                style={{\r\n                  marginLeft: \"10px\",\r\n                  marginTop: \"10px\"\r\n                }}\r\n              />\r\n              <div\r\n                className=\"CollapsedChildren\"\r\n                style={{ marginLeft: \"0px\" }}\r\n              />\r\n            </div>\r\n          )}\r\n        </div>\r\n        <div\r\n          ref={childrenDiv}\r\n          className={classNames(\"Level\", \"L1\", \"collapsed\", {\r\n            hidden: !showChildren\r\n          })}\r\n        >\r\n          {props.children}\r\n        </div>\r\n      </React.Fragment>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { ObjectiveCard } from \"./components/ObjectiveCard\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <ObjectiveCard key=\"a\">\n        <ObjectiveCard key=\"a.1\" />\n        <ObjectiveCard key=\"a.2\" />\n      </ObjectiveCard>\n      <ObjectiveCard key=\"b\">\n        <ObjectiveCard key=\"b.1\" />\n        <ObjectiveCard key=\"b.2\">\n          <ObjectiveCard key=\"b.2.a\">\n            <ObjectiveCard key=\"b.2.a.1\" />\n          </ObjectiveCard>\n          <ObjectiveCard key=\"b.2.b\" />\n          <ObjectiveCard key=\"b.2.c\" />\n          <ObjectiveCard key=\"b.2.d\" />\n        </ObjectiveCard>\n        <ObjectiveCard />\n        <ObjectiveCard />\n      </ObjectiveCard>\n      <ObjectiveCard key=\"c\" />\n      <ObjectiveCard key=\"d\">\n        <ObjectiveCard key=\"d.1\" />\n        <ObjectiveCard key=\"d.2\" />\n      </ObjectiveCard>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}